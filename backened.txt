npm init -y it create package.json 
and in .json put all dependencies with version so that in future during making project no any problem create

then npm install it check package.json and dependencies and install all dependencies 

then create server.js file and import module to use import  write type:module

üí° Example:
Suppose you‚Äôre building a full-stack app:

Frontend (React with Vite): http://localhost:5173
If you're using Vite (a modern frontend build tool), it runs on port 5173 by default.


Backend (Node.js Express): http://localhost:5001
You might be running a Node.js/Express or Flask or Django app on port 5001.


When the frontend needs data, it makes requests like:

fetch('http://localhost:5001/api/user')


.env(create port=5001 so hardcoded not put)

üîÑ Difference:
Type	Syntax	Supports Variable	Multi-line
Normal String	'Hello ' + name	‚úÖ Yes	‚ùå No
Template String	`Hello ${name}`	‚úÖ Yes	‚úÖ Yes(HERE WE USE BACKTICK)

creating src folder in backened and move server.js and modified in .json, dev nodemon src/server.js  and in main from index.js to src/server.js

// async means that the function will return a promise and do not wait for it to finish and other tasks can be executed in that time


// const conn = await mongoose.connect(...)
mongoose.connect() is an asynchronous function. It returns a promise.

We use await to wait until the connection is successful.

While waiting, JavaScript can do other work ‚Äî this is non-blocking.




****************************best practice **********
server.js-> routes folder -> controller folder


*******************************mongodb
go to mongodbatlas click on  create  new project with streamifhy name then click on create project and click on free ->create deployement ->select drivers ->copy mongo uri and put in .env file->then create on folder lib->db.js file -> or one things go to network acess in mongodb and allow acess from anywhere

********************models folder when to create**********
 we create this folder to save data in file so in this folder we create file and that file task is used to save the data in mongodb and to create file first letter should be capital like User.js

//mongoose.Schema is used to define the structure of a document in MongoDB.

userSchema defines the fields each user document will have.

//üî∏ 1. userSchema.pre("save", async function(next) { ... })
This sets a pre-save hook.

It means: Before saving any user, this function will run.

Used to modify or validate data before it goes into MongoDB.

this refers to the document being saved (the individual user).

//node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
 use to generate token


//You save the JWT in cookies:

During Signup: To auto-login the new user.

During Login: To re-authenticate the returning user.







*****************************streamifhy
i have login from college id and gett acces of api key secret key



******************************* decode 
‚úÖ So when you decode it later:
const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
Then decoded will be something like:

{
  userId: '665c1c345f7b8a129bda1d97', // Example MongoDB ObjectId
  iat: 1718127612, // Issued at timestamp
  exp: 1720729612  // Expiration timestamp
}


///********************* why post in logout
Summary:
Action	Safe to Use GET?	Why POST?
Logout	‚ùå No	It changes server/client state by clearing the cookie

‚úÖ What POST can do:
Action	Explanation
üî∏ Send data	E.g., login info, signup form, form submissions
üî∏ Create something	E.g., new user, new post
üî∏ Trigger actions	E.g., logout, file upload, password reset
üî∏ Cause side effects on server	E.g., database updates, cookie changes, email sending, etc.



//**************************friendrquies,findone model in mongoose
const existingRequest = await FriendRequest.findOne({
  $or: [
    { sender: myId, recipient: recipientId },
    { sender: recipientId, recipient: myId },
  ],
});
üîç 1. What is FriendRequest.findOne()?
FriendRequest is a Mongoose model (just like a table in SQL).

.findOne() is a built-in Mongoose method that finds the first matching document from MongoDB that matches the filter/query you give.

SELECT * FROM friend_requests WHERE (...) LIMIT 1;



//********************user.findbyid means in usercontroller.js send friend requests working********************

const recipient = await User.findById(recipientId);
```

### ‚ùì What does `User.findById()` do?
It's a **Mongoose function** (not built-in JavaScript, but part of Mongoose library used with MongoDB).

> üîç It searches the **MongoDB collection** for a document (user) whose `_id` matches the given `recipientId`.

---

### ‚úÖ What does it return?

It returns a **full user object** from your MongoDB database if the user exists. Otherwise, it returns `null`.

---

### üí° Example

Let's say you have this document in MongoDB:

```json
{
  "_id": "664a123abc",
  "fullName": "Priya Sharma",
  "email": "priya@example.com",
  "friends": ["664a001xyz", "664a888jkl"]
}
```

Then calling:

```js
const recipient = await User.findById("664a123abc");
```

will give you:

```js
{
  _id: new ObjectId("664a123abc"),
  fullName: "Priya Sharma",
  email: "priya@example.com",
  friends: ["664a001xyz", "664a888jkl"],
  __v: 0
}
```

---

### ‚úÖ So now this line:

```js
if (recipient.friends.includes(myId))
```

Means:

> "Does the `friends` array of the `recipient` user contain the sender's ID?"

---

### ‚ùå If user is not found?

Then `recipient` becomes `null`, and this block runs:

```js
if (!recipient) {
  return res.status(404).json({ message: "Recipient not found" });
}
```

---

Let me know if you want me to simulate this with dummy data or in Postman!






//***************if in route id pass then acess using params
const { id: requestId } = req.params;(also you can change id to requiestid with :)
req.params.id comes from the URL.

